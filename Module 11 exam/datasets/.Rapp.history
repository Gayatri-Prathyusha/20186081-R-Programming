set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
est = subset(parole, split == FALSE)
test = subset(parole, split == FALSE)
summary(train)
str(train)
summary(test)
str(test)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
summary(train)
str(train)
summary(test)
str(test)
set.seed(140)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
summary(tarin)
summary(train)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
summary(train)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
Model = glm(violator ~ ., data = train, family = "binomial")
summary(Model)
Model$coefficients['multiple.offenses']
exp(Model$coefficients['multiple.offenses'])
str(Model)
summary(Model)
exp(Model$coefficients['multiple.offenses'][[1]])
summary(Model)
model$coefficients['max.sentence'][[1]] * 12 + model$coefficients['crime2'][[1]]
logit = model$coefficients['(Intercept)'][[1]] + model$coefficients['male'][[1]] + model$coefficients['race'][[1]] * 1 +
logit = model$coefficients['(Intercept)'][[1]] + model$coefficients['male'][[1]] + model$coefficients['race'][[1]] * 1 +
model$coefficients['age'][[1]] * 50 + model$coefficients['time.served'][[1]] * 3 +
model$coefficients['max.sentence'][[1]] * 12 + model$coefficients['crime2'][[1]]
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 +
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 +
Model$coefficients['age'][[1]] * 50 + Model$coefficients['time.served'][[1]] * 3 +
Model$coefficients['max.sentence'][[1]] * 12 + Model$coefficients['crime2'][[1]]
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 + Model$coefficients['age'][[1]] * 50 + Model$coefficients['time.served'][[1]] * 3 +
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 + Model$coefficients['age'][[1]] * 50 + Model$coefficients['time.served'][[1]] * 3 + Model$coefficients['max.sentence'][[1]] * 12 + Model$coefficients['crime2'][[1]]
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 + Model$coefficients['age'][[1]] * 50+ Model$coefficients['time.served'][[1]] * 3 + Model$coefficients['max.sentence'][[1]] * 12 + Model$coefficients['crime2'][[1]]
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 + Model$coefficients['age'][[1]] * 50+ Model$coefficients['time.served'][[1]] * 3 + Model$coefficients['max.sentence'][[1]] * 12 + Model$coefficients['crime2'][[1]]
logit
logit = Model$coefficients['(Intercept)'][[1]] + Model$coefficients['male'][[1]] + Model$coefficients['race'][[1]] * 1 + Model$coefficients['age'][[1]] * 50+ Model$coefficients['time.served'][[1]] * 3 + Model$coefficients['max.sentence'][[1]] * 12 + Model$coefficients['crime'][[1]]
logit
exp(logit)
1/(1+exp(-logit))
letters = read.csv("letters_ABPR.csv")
summary(letters)
str(letters)
letters$isB = as.factor(letters$letter == "B")
set.seed(1000)
spl = sample.split(letters$isB, SplitRatio = 0.5)
train = subset(letters, spl == TRUE)
test = subset(letters, spl == FALSE)
table(test$isB)
1175/(1175+383)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
install rpart
install.packages.rpart
install.packages('rpart')
library(rpart)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
predictions = predict(CARTb, newdata=test, type="class")
table(test$isB, predictions)
nrow(test)
(1118+340)/nrow(test)
set.seed(1000)
RFb = randomForest(isB ~ . - letter, data=train)
predictions = predict(RFb, newdata=test)
install.packages('randomForest')
predictions = predict(RFb, newdata=test)
RFb = randomForest(isB ~ . - letter, data=train)
library(randomForest)
RFb = randomForest(isB ~ . - letter, data=train)
predictions = predict(RFb, newdata=test)
table(test$isB, predictions)
(1165+374)/nrow(test)
gerber = read.csv("gerber.csv")
gerber = read.csv("gerber.csv")
summary(gerber)
str(gerber)
table(gerber$voting)
gerber$voting
nrow(gerber)
108696/ nrow(gerber)
table(gerber$neighbors, gerber$voting)
table(gerber$self, gerber$voting)
table(gerber$hawthorne, gerber$voting)
table(gerber$civicduty, gerber$voting)
logmodel = glm(voting ~ civicduty + hawthorne+self+neighbors, data = gerber, family = "binomial")
summary(logmodel)
predictLog = predict(logmodel, type="response")
table(gerber$voting, predictLog > 0.3)
(134513+51966)/ (134513+51966+100875+56730)
table(gerber$voting, predictLog > 0.5)
235388/(235388+108696)
install.packages("rpart.plot")
library(rpart.plot)
library(ROCR)
install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictLog, gerber$voting)
as.numeric(performance(ROCRpred, "auc")@y.values)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
CARTmodel1 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp =0.0)
prp(CARTmodel1)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors+sex, data=gerber, cp = 0.0)
prp(CARTmodel2)
cartcontrol = rpart(voting ~ control, data=gerber, cp=0.0)
cartcontrol1 = rpart(voting ~ control+sex, data=gerber, cp=0.0)
prp(cartcontrol, digits=6)
prp(CARTmodel2)
bank = read.csv("bank.csv")
bank = read.csv("bank-full.csv")
summary(bank)
set.seed(1000)
split = sample.split(bank, SplitRatio = 0.6)
train = subset(bank, split == TRUE)
train = subset(bank, split == TRUE)
test = subset(bank, split == FALSE)
Model1 = glm(bank ~ age + balance +campaign +duration, data = train, family = "binomial")
Model1 = glm(bank$y ~ age + balance +campaign +duration, data = train, family = "binomial")
Model1 = glm(y ~ age + balance +campaign +duration, data = train, family = "binomial")
summary(Model1)
Model2 = glm(y ~ age+ balance +duration, data = train, family = "binomial")
summary(Model2)
predictmodel1 = predict(Model1, type = "response")
predictmodel1 = predict(Model1,newdata = train, type = "response")
table(Model1 , predictmodel1 <= 0.5)
table(Model1$y , predictmodel1 <= 0.5)
table(Model1$y , predictmodel1 = 0.5)
table(Model1$y , predictmodel1 >= 0.5)
table(Model1$y , predictmodel1 <= 0.5)
table(Model1$y , predictmodel1 >= 0.5)
529/(2588 +529)
23118/(23118 + 359)
CARTModel = rpart(y ~ age +balance + duration, data = bank)
prp(CARTmodel)
predicttest = predict(Model1, newdata = test, type = "response")
ROCRpred = prediction(predicttest, bank$y)
ROCRpred = prediction(predicttest, bank)
ROCRpred = prediction(predicttest, bank$y)
predicttest = predict(Model2, newdata = test, type = "response")
ROCRpred = prediction(predicttest, bank$y)
predicttest = predict(Model1, newdata = test, type = "response")
ROCRpred = prediction(predicttest, bank$y)
ROCRpred = prediction(predicttest, test$y)
as.numeric(performance(ROCRpred, "auc")@y.values)
table(Model1$y , predictmodel1 > 0.5)
summary(bank)
str(bank)
table(bank$marital == "married" & bank$job == "technician")
predicttest = predict(Model2, newdata = test, type = "response")
predicttest = predict(Model1, newdata = test, type = "response")
predicttest1 = predict(Model2, newdata = test, type = "response")
ROCRpred = prediction(predicttest, test$y)
as.numeric(performance(ROCRpred, "auc")@y.values)
ROCRpred1 = prediction(predicttest1, test$y)
as.numeric(performance(ROCRpred1, "auc")@y.values)
CARTmodel2 = rpart(y ~ age + balance + campaign +duration , data = bank)
prp(CARTmodel2)
predictcart = predict(CARTmodel2, newdata = test , type = "response")
predictcart = predict(Model2, newdata = CARTmodel2 , type = "response")
cartinf = rpart(y$ married + technician, cp = 0.0)
cartinf = rpart(y ~ married + technician, cp = 0.0)
cartinf = rpart(y ~ married + technician,data = bank, cp = 0.0)
cartinf = rpart(y ~ marital + job,data = bank, cp = 0.0)
prp(cartinf)
prp(cartinf, digits = 6)
climate = read.csv("climate-change.csv")
climate = read.csv("climate_change.csv")
summary(climate)
unique(climate$year)
str(climate)
sum(unique(climate$year))
cartinf
CARTModel = rpart(y ~ age +balance + duration,method = "class", data = bank)
prp(CARTmodel)
predicttest = predict(Model1, newdata = test, type = "response")
predicttest = predicttest[,2]
predicttest = predicttest[, 2]
predicttest = predicttest[,2]
predicttest = predict(CARTmodel, newdata = test, type = "response")
predicttest = predict(CARTmodel, newdata = test)
CARTModel11 = rpart(y ~ age +balance + duration,method = "class", data = bank)
prp(CARTmodel11)
prp(CARTModel11)
predicttest = predict(CARTModel11, newdata = test)
predicttest = predicttest[,2]
ROCRpred = prediction(predicttest, test$y)
as.numeric(performance(ROCRpred, "auc")@y.values)
data(Movies)
moviedata = data.frame(Movies.txt)
moviedata = data.frame(Movies.x77)
moviedata = data.frame(Movies)
data(Movies.txt)
read.table("Movies.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
read.table("Movies.txt", header = TRUE, sep = "|",stringsAsFactors = FALSE)
read.delim("Movies.txt",stringsAsFactors = FALSE)
read.delim("Movies.txt",header = TRUE, sep = "\t", quote = "\"", dec = "|",fill = TRUE, comment.char ="",...)
read.delim("Movies.txt",header = TRUE, sep = "\t", quote = "\"", dec = "|",fill = TRUE, comment.char ="", ...)
read.delim("Movies.txt",header = TRUE, sep = "\t", quote = "\"", dec = "|",fill = TRUE)
read.delim("Movies.txt",header = TRUE, sep = "\t", quote = "\"", dec = ",",fill = TRUE)
Movie = read.delim("Movies.txt",header = TRUE, sep = "\t", quote = "\"", dec = "|",fill = TRUE)
summary(Movie)
str(Movie)
Movies = read.table("Movies.txt", header = TRUE, sep = "|",quote = "\"")
str(Movies)
summary(Movies)
read.table("Movies.txt", header = TRUE, sep = "|",quote = "\"")
colnames(Movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
colnames(Movies)
Movies$ID = NULL
Movies$ReleaseDate = NULL
Movies$VideoReleaseDate = NULL
Movies$IMDB =NULL
Movies$IMDB = NULL
table(Movies$Action & Movies$Horror)
distances = dist(movies[2:20], method = "euclidean")
distances = dist(Movies[2:20], method = "euclidean")
clusterMovies = hclust(distances, method = "ward.D")
plot(clusterMovies)
clusterMovies = hclust(distances, method = "euclidean"")
clusterMovies = hclust(distances, method = "euclidean")
clusterMovies = hclust(distances, method = "euclidean")
clusterMovies = hclust(distances, method = "cluster")
clusterGroups = cutree(clusterMovies, k = 10)
clusterGroups = cutree(clusterMovies, k = 100)
clusterMovies = hclust(distances, method = "ward.D", break = 100)
clusterMovies = hclust(distances, method = "ward.D", break = 10)
clusterMovies = hclust(distances, method = "ward.D", break == 100)
clusterGroups = cutree(clusterMovies, k = 10)str(Movies)
str(Movies)
